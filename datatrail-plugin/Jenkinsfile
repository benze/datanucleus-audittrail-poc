import groovy.json.JsonOutput
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.Random
import java.util.regex.Pattern
import java.util.regex.Matcher


/*
 * initialize the pipeline
 */

MAVEN_VERSION = "Maven 3.x"
PROJECT_FOLDER = "datatrail-plugin/"

pipeline {
  agent any
    options {
        timeout(time: 1, unit: 'HOURS')
    }

    environment {
        SONAR_URL = "https://sonarqube.wada-ama.org"
        SONAR_PROJECT = "Datanucleus.DataTrail"
        JIRA_SITE = 'wada-ama.atlassian.net'
        GIT_PROJECT = "ADAMS"
        GIT_REPOSITORY = "datatrail-plugins"
        BUILD_NUMBER = VersionNumber([
            versionNumberString : '${BUILD_DATE_FORMATTED,"yyDDD"}${BUILDS_TODAY,XX}',
            projectStartDate : '1969-12-31',
            worstResultForIncrement: 'NOT_BUILT'
            ])
        POM_VERSION = getPomValue(PROJECT_FOLDER, Pom.VERSION)
        BUILD_VERSION = "$POM_VERSION-$BUILD_NUMBER"
    }

    stages {
        stage("Env Variables") {
            steps {
                sh "printenv"
            }
        }

         stage('Maven build, test and ship to Nexus') {
            agent{
                dockerfile{
                    filename "$PROJECT_FOLDER/.devcontainer/Dockerfile"
                    args '-v m2:/m2'
                }
            }
            stages{
                stage( "Build and Deploy"){
                    steps{
                        dir(PROJECT_FOLDER){
                            configFileProvider([
                                configFile(fileId: 'fa4c4c5b-29b3-46f1-8cd8-5b83b07f491c', targetLocation: '.mvn/jvm.config'),
                                configFile(fileId: '59d605db-7b8a-47c3-b220-6af4dc4facf0', targetLocation: '.mvn/settings.xml')
                            ]) {
                                    withCredentials([string(credentialsId: 'sonar-scan', variable: 'SONAR_TOKEN')]) {
                                        wrap([$class: 'BuildUser']) {
                                        sh label: 'Run Maven clean deploy', script: """
                                                mvn -s .mvn/settings.xml \
                                                    -Dwada.scm.tag="builds/${BUILD_VERSION}" \
                                                    -DdeployAtEnd=true \
                                                    -Dwada.scm.commitId="${GIT_COMMIT}" \
                                                    -Dwada.build.timestamp="${BUILD_TIMESTAMP}" \
                                                    -Dwada.build.user="${BUILD_USER_EMAIL}" \
                                                    -Dbuild.jobName="${JOB_NAME}" \
                                                    -Dmaven.test.skip=false \
                                                    -Dwada.build.number="${BUILD_NUMBER}" \
                                                    -Dwada.scm.branch="${GIT_BRANCH}"  \
                                                    clean deploy """                                      
                                    }
                                }
                            }
                        }
                    }
                
                    post {
                        failure {
                            buildDescription "Failed to build version ${BUILD_NUMBER}"
                        }
                        success {
                            buildDescription "Built version ${BUILD_NUMBER}"
                        }                 
                    }
                }

                stage( "Sonar Scan"){
                    steps{
                        dir(PROJECT_FOLDER){
                            configFileProvider([
                                configFile(fileId: 'fa4c4c5b-29b3-46f1-8cd8-5b83b07f491c', targetLocation: '.mvn/jvm.config'),
                                configFile(fileId: '59d605db-7b8a-47c3-b220-6af4dc4facf0', targetLocation: '.mvn/settings.xml')
                            ]) {
                                    withCredentials([string(credentialsId: 'sonar-scan', variable: 'SONAR_TOKEN')]) {
                                        wrap([$class: 'BuildUser']) {
                                        sh label: 'Run Sonar Scan', script: """
                                                mvn -s .mvn/settings.xml \
                                                    -Dsonar.login=${SONAR_TOKEN} \
                                                    -Dsonar.host.url=${SONAR_URL} \
                                                    -Dsonar.branch.name=${GIT_BRANCH} \
                                                    -Dsonar.projectKey=${SONAR_PROJECT} \
                                                    sonar:sonar """                                      
                                    }
                                }
                            }
                        }
                    }

                    post {
                        failure {
                            buildDescription "Failed to scan ${SONAR_PROJECT} : ${GIT_BRANCH}"
                        }
                        success {
                            buildDescription "Sonar Scan Complete ${SONAR_PROJECT} : ${GIT_BRANCH}"
                        }                 
                    }
                }
            }

         }         

          stage('GIT Tag') {
            environment{
                BITBUCKET_CREDS = credentials('bitbucket-server')
            }
            when { 
                not { changeRequest() } 
                not { buildingTag() } 
            }
            steps {
                    sh "git tag builds/$BUILD_VERSION"
                    sh "git push https://${BITBUCKET_CREDS}@${GIT_URL - ~/^https:\/\//} builds/$BUILD_VERSION"
            }
        } 
        
     }
}


String gitTagMessage(name, key) {
    msg = sh(script: "git tag -n10000 -l ${name}", returnStdout: true)?.trim()
    String[] values = msg.substring(name.size()+1, msg.size()).split(",")
    for (it in values) {
        item = it.split(":")
        if(item[0]==key) {
            value = item[1]
            return value
        }
    }
    return null
}

enum Pom {
    VERSION ("project.version"),
    ARTIFACT_ID ("project.artifactId"),
    GROUP_ID ("project.groupId")

    private String fieldname

    Pom(String fieldname){
        this.fieldname = fieldname
    }

    String getFieldname(){
        fieldname
    }
}

String getPomValue( folder, Pom field){
        withMaven(
                maven: MAVEN_VERSION,
                mavenSettingsConfig: '59d605db-7b8a-47c3-b220-6af4dc4facf0',
                traceability: 'false'
        ){
            dir(folder){
                version = sh ( script: "mvn help:evaluate -Dexpression=${field.fieldname} -q -DforceStdout", returnStdout: true).trim()
            }
        }
    return version
}