package org.datanucleus.datatrail.spi;

import org.datanucleus.datatrail.impl.DataTrailFactory;
import org.datanucleus.datatrail.impl.nodes.NodeDefinition;
import org.datanucleus.metadata.MetaData;

import java.util.Optional;

public interface NodeFactory {
    /**
     * Sets the {@link DataTrailFactory} used to create this factory.  In order to protect the structural integrity of the generated Nodes,
     * the dataTrailFactory cannot be changed once it is set.  A new factory needs to be instantiated instead.
     *
     * @param dataTrailFactory
     */
    void setDataTrailFactory(DataTrailFactory dataTrailFactory);

    /**
     * Identifies if this factory supports / can produce a node with the given parameters
     *
     * @param action
     * @param value  the object to be represented by a DataTrail node
     * @param md     the metadata relating to the given object
     * @return
     */
    boolean supports(NodeAction action, Object value, MetaData md);

    /**
     * Factory method to create a node with the given parameters.
     *
     * @param value  the object to be represented by a DataTrail node
     * @param md     the metadata relating to the given object
     * @param parent the parent node for this node.  Null if this is supposed to be the root of the tree
     * @return Only produces a node if the factory can create it
     */
    Optional<Node> createNode(NodeAction action, Object value, MetaData md, Node parent);

    
    /**
     * Type of node implemented by the class
     */
    default NodeType type() {
        final NodeDefinition nodeDefn = getClass().getAnnotation(NodeDefinition.class);
        return nodeDefn == null ? null : nodeDefn.type();
    }


    /**
     * Type of action implemented by the class
     *
     * @return
     */
    default NodeAction[] action() {
        final NodeDefinition nodeDefn = getClass().getAnnotation(NodeDefinition.class);
        return nodeDefn == null ? null : nodeDefn.action();
    }


    /**
     * The priority of the node generated by the class.  By default, the priority is '0'.
     *
     * @return
     */
    default int priority() {
        final Priority nodePriority = getClass().getAnnotation(Priority.class);
        return nodePriority == null ? 0 : nodePriority.priority();
    }

}
